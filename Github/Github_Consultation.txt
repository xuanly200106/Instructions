GitHub Consult Notes

初始化：
在对应目录下	git init

查看信息
git status	查看状态
git diff <file> 查看文档修改细节（未提交的变动）
git log 查看最远到最近日志
git reflog 查看历史的日志

添加文件到仓库：
git add <file>

提交仓库
git commit -m "<Instructions>"

版本退回：
git reset --hard HEAD^
	HEAD为当前版本，HEAD^^（^个数表示退回数目），HEAD~N(N表示退回数目)
git reset --hard <版本号>——退回固定版本

撤销工作区修改：
git checkout -- <file> 暂存区没有时返回版本库，否则返回暂存区

撤销暂存区修改：
git reset HEAD <file> 即重设为HEAD版本

删除文件：
git remove <file>
git commit -m "<Instructions>"

添加远程库：
	git remote add <远程库名称，默认为origin> git@github.com:xuanly200106/<repository name>.git
推至远程库：
	git push origin master		(我们第一次推送master分支时，加上了-u参数（位于origin前面），Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。)
从远程库克隆：
	git clone git@github.com:xuanly200106/<Name>.git
	
创建分支
	git branch <name>
切换分支
	git checkout <name>
创建并切换分支
	git checkout -b <name>
查看当前分支
	git branch
分支合并
	git merge <branch name>
删除分支
	git branch -d <name>

Git结构：
Working Directory（工作区）
Repository（版本库）
	Stage（暂存区）
	Master（分支）。对应的指针HEAD
	
Windows Settings:
	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"

远程仓库设置：
	第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
			$ ssh-keygen -t rsa -C "youremail@example.com"
		你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。
		如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
	第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
		然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容

分支管理
	原来主分支为master，对应指针为HEAD
	创建分支dev，则产生了新的分支指针dev，并且将HEAD指向dev



